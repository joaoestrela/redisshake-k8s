apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "redisshake.fullname" . }}-config
  labels:
    {{- include "redisshake.labels" . | nindent 4 }}
data:
  shake.toml: |
    # RedisShake Configuration
    # Generated by Helm chart

    {{- if .Values.reader.sync.enabled }}
    [sync_reader]
    cluster = {{ .Values.reader.sync.cluster }}
    {{- if and .Values.reader.sync.secret.enabled .Values.reader.sync.secret.hostKey .Values.reader.sync.secret.portKey }}
    address = "${SHAKE_SRC_HOST}:${SHAKE_SRC_PORT}"
    {{- else }}
    address = "${SHAKE_SRC_ADDRESS}"
    {{- end }}
    username = "${SHAKE_SRC_USERNAME}"
    password = "${SHAKE_SRC_PASSWORD}"
    tls = {{ .Values.reader.sync.tls }}
    sync_rdb = {{ .Values.reader.sync.sync_rdb }}
    sync_aof = {{ .Values.reader.sync.sync_aof }}
    prefer_replica = {{ .Values.reader.sync.prefer_replica }}
    try_diskless = {{ .Values.reader.sync.try_diskless }}
    {{- end }}

    {{- if .Values.reader.scan.enabled }}
    [scan_reader]
    cluster = {{ .Values.reader.scan.cluster }}
    {{- if and .Values.reader.scan.secret.enabled .Values.reader.scan.secret.hostKey .Values.reader.scan.secret.portKey }}
    address = "${SHAKE_SRC_HOST}:${SHAKE_SRC_PORT}"
    {{- else }}
    address = "${SHAKE_SRC_ADDRESS}"
    {{- end }}
    username = "${SHAKE_SRC_USERNAME}"
    password = "${SHAKE_SRC_PASSWORD}"
    tls = {{ .Values.reader.scan.tls }}
    dbs = [{{- range .Values.reader.scan.dbs }}{{ . }}{{ if not (last . $.Values.reader.scan.dbs) }}, {{ end }}{{- end }}]
    scan = {{ .Values.reader.scan.scan }}
    ksn = {{ .Values.reader.scan.ksn }}
    count = {{ .Values.reader.scan.count }}
    {{- end }}

    {{- if .Values.reader.rdb.enabled }}
    [rdb_reader]
    filepath = "{{ .Values.reader.rdb.filepath }}"
    {{- end }}

    {{- if .Values.reader.aof.enabled }}
    [aof_reader]
    filepath = "{{ .Values.reader.aof.filepath }}"
    timestamp = {{ .Values.reader.aof.timestamp }}
    {{- end }}

    {{- if .Values.writer.redis.enabled }}
    [redis_writer]
    cluster = {{ .Values.writer.redis.cluster }}
    {{- if and .Values.writer.redis.secret.enabled .Values.writer.redis.secret.hostKey .Values.writer.redis.secret.portKey }}
    address = "${SHAKE_DST_HOST}:${SHAKE_DST_PORT}"
    {{- else }}
    address = "${SHAKE_DST_ADDRESS}"
    {{- end }}
    username = "${SHAKE_DST_USERNAME}"
    password = "${SHAKE_DST_PASSWORD}"
    tls = {{ .Values.writer.redis.tls }}
    off_reply = {{ .Values.writer.redis.off_reply }}
    {{- end }}

    {{- if .Values.writer.file.enabled }}
    [file_writer]
    filepath = "{{ .Values.writer.file.filepath }}"
    type = "{{ .Values.writer.file.type }}"
    {{- end }}

    [filter]
    allow_keys = [{{- range .Values.filter.allow_keys }}"{{ . }}"{{ if not (last . $.Values.filter.allow_keys) }}, {{ end }}{{- end }}]
    allow_key_prefix = [{{- range .Values.filter.allow_key_prefix }}"{{ . }}"{{ if not (last . $.Values.filter.allow_key_prefix) }}, {{ end }}{{- end }}]
    allow_key_suffix = [{{- range .Values.filter.allow_key_suffix }}"{{ . }}"{{ if not (last . $.Values.filter.allow_key_suffix) }}, {{ end }}{{- end }}]
    allow_key_regex = [{{- range .Values.filter.allow_key_regex }}"{{ . }}"{{ if not (last . $.Values.filter.allow_key_regex) }}, {{ end }}{{- end }}]
    block_keys = [{{- range .Values.filter.block_keys }}"{{ . }}"{{ if not (last . $.Values.filter.block_keys) }}, {{ end }}{{- end }}]
    block_key_prefix = [{{- range .Values.filter.block_key_prefix }}"{{ . }}"{{ if not (last . $.Values.filter.block_key_prefix) }}, {{ end }}{{- end }}]
    block_key_suffix = [{{- range .Values.filter.block_key_suffix }}"{{ . }}"{{ if not (last . $.Values.filter.block_key_suffix) }}, {{ end }}{{- end }}]
    block_key_regex = [{{- range .Values.filter.block_key_regex }}"{{ . }}"{{ if not (last . $.Values.filter.block_key_regex) }}, {{ end }}{{- end }}]
    allow_db = [{{- range .Values.filter.allow_db }}{{ . }}{{ if not (last . $.Values.filter.allow_db) }}, {{ end }}{{- end }}]
    block_db = [{{- range .Values.filter.block_db }}{{ . }}{{ if not (last . $.Values.filter.block_db) }}, {{ end }}{{- end }}]
    allow_command = [{{- range .Values.filter.allow_command }}"{{ . }}"{{ if not (last . $.Values.filter.allow_command) }}, {{ end }}{{- end }}]
    block_command = [{{- range .Values.filter.block_command }}"{{ . }}"{{ if not (last . $.Values.filter.block_command) }}, {{ end }}{{- end }}]
    allow_command_group = [{{- range .Values.filter.allow_command_group }}"{{ . }}"{{ if not (last . $.Values.filter.allow_command_group) }}, {{ end }}{{- end }}]
    block_command_group = [{{- range .Values.filter.block_command_group }}"{{ . }}"{{ if not (last . $.Values.filter.block_command_group) }}, {{ end }}{{- end }}]
    function = "{{ .Values.filter.function }}"

    [advanced]
    dir = "{{ .Values.advanced.dir }}"
    ncpu = {{ .Values.advanced.ncpu }}
    pprof_port = {{ if .Values.advanced.pprof.enabled }}{{ .Values.advanced.pprof.port }}{{ else }}0{{ end }}
    status_port = {{ if .Values.advanced.status.enabled }}{{ .Values.advanced.status.port }}{{ else }}0{{ end }}
    log_file = "{{ .Values.advanced.log_file }}"
    log_level = "{{ .Values.advanced.log_level }}"
    log_interval = {{ .Values.advanced.log_interval }}
    log_rotation = {{ .Values.advanced.log_rotation }}
    log_max_size = {{ .Values.advanced.log_max_size }}
    log_max_age = {{ .Values.advanced.log_max_age }}
    log_max_backups = {{ .Values.advanced.log_max_backups }}
    log_compress = {{ .Values.advanced.log_compress }}
    rdb_restore_command_behavior = "{{ .Values.advanced.rdb_restore_command_behavior }}"
    pipeline_count_limit = {{ .Values.advanced.pipeline_count_limit }}
    target_redis_client_max_querybuf_len = {{ .Values.advanced.target_redis_client_max_querybuf_len }}
    target_redis_proto_max_bulk_len = {{ .Values.advanced.target_redis_proto_max_bulk_len }}
    aws_psync = "{{ .Values.advanced.aws_psync }}"
    empty_db_before_sync = {{ .Values.advanced.empty_db_before_sync }}

    [module]
    target_mbbloom_version = {{ .Values.module.target_mbbloom_version }}
